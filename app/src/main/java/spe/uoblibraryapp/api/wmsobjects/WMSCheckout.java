package spe.uoblibraryapp.api.wmsobjects;

import spe.uoblibraryapp.api.WMSException;
import spe.uoblibraryapp.api.WMSResponse;
import spe.uoblibraryapp.api.collection.WMSCollectionManagementController;
import spe.uoblibraryapp.api.ncip.WMSNCIPStaffService;

/**
 * This is generated by a user profile and has all the controls needed to checkout a book
 * @author rileyevans
 */
public class WMSCheckout {
    private String itemId;
    private WMSUserProfile userProfile;
    private WMSNCIPStaffService staffService;
    private Boolean rejected = false;
    private Boolean accepted = false;
    private WMSBook book;

    /**
     *
     * @param itemId the id of the book, read from nfc tag
     * @param userProfile the UserProfile for the user, needed for userId
     * @param staffService the current WMSNCIPStaffService, needed to checkout books.
     */
    WMSCheckout(
            String itemId,
            WMSUserProfile userProfile,
            WMSNCIPStaffService staffService
    ){
        this.itemId = itemId;
        this.staffService = staffService;
        this.userProfile = userProfile;

        WMSCollectionManagementController collManage = new WMSCollectionManagementController();
        this.book = collManage.lookupBook(itemId);

    }

    /**
     * Exists for the UI people to get book info for a checkout
     * @return
     */
    public WMSBook getBook(){
        return this.book;
    }

    /**
     * Used to accept a checkout after confirmation
     * @return this returns false if there was an error checking out the book.
     */
    public Boolean accept() throws WMSException{
        if (rejected) {
            // Wooooaaaaah! You cant accept a checkout after you've rejected it, make a new one. ðŸ¤¬
            throw new WMSException("You can't accept a checkout after it's been rejected");
        } else if (accepted){
            throw new WMSException("Checkout has already been accepted");
        }

        this.accepted = true;
        WMSResponse res = staffService.checkOut(userProfile.getUserId(), itemId);
        return res.didFail();
    }

    /**
     * Used to reject a checkout after confirmation
     * Essentially invalidates this checkout.
     */
    public void reject() throws WMSException{
        if (accepted) {
            // just wait a sec and think about it... Q: can you undo a book checkout?
            // A: no you cant.
            throw new WMSException("You can't reject a checkout after it's been accepted"); // Ideally this should be throw new YouAreAnIdiotException()
        } else if (rejected){
            throw new WMSException("Checkout has already been rejected");
        }
        this.rejected = true;
    }

}
